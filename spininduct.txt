

spininductplus:=function(n,q:func:=false,largeff:=false, aut:=false);
// Input: an integer n>2 and a prime power q
// Return: generators for the half-spin representation of 2.SO^+_2n(q)
// For spin representation, interchange the last two generators and direct sum the resulting matrices
// largeff used for constructing twisted representations, where we need to make FF larger

	if n le 2 then;
		error "Require n > 2";
	end if;

	if aut eq true and (q eq 0 or func eq true) then;
		error "aut=true only works for nonzero q and func := false";
	end if;

	if q eq 0 then;
		F:=Rationals();
		if largeff then;
			FF<t,u,del,gam,delbar,gambar>:=PolynomialRing(F,6);
		else;
			FF<t,u>:=PolynomialRing(F,2);	
		end if;
		G:=GL(2^(n-1),FF);
		M:=MatrixAlgebra(FF,2^(n-1));
		B:=[t];
	else;
		M:=MatrixAlgebra(GF(q),2^(n-1));
		G:=GL(2^(n-1),q);
		FF := GF(q);
		B:=Basis(FF);
	end if;

	E:=function(i,j);
		out:=Zero(M);
		out[i][j]:=1;
		return out;
	end function;


	if n eq 3 then;
		alpha:=[];
		alpha[1]:=function(t) ; return Identity(M) + t*E(3,2); end function;
		alpha[2]:=function(t) ; return Identity(M) - t*E(2,1); end function;
		alpha[3]:=function(t) ; return Identity(M) + t*E(4,3); end function;
		
		alpham:=[];
		for i in [1..3] do;
			alpham[i] := function(t); return Transpose(alpha[i](t)); end function;
		end for;

		if func eq true then;
			return alpha,alpham;
		else;
			W:=[]; Wm:=[];
			for i in [1..3] do;
				for b in B do;
					Append(~W,alpha[i](b));
					Append(~Wm,alpham[i](b));
				end for;
			end for;
			if aut eq false then;
				return W,Wm;
			else;
				nu := PrimitiveElement(GF(q));
				d:=DiagonalMatrix(GF(q),[nu,1,1,1]);
				return W,Wm,[d];
			end if;
		end if;
	end if;

	beta,betam:=$$(n-1,q:func:=true,largeff:=largeff);

	alpha:=[];
	alpham:=[];


	alpha[1]:= function(t);
	a:=Identity(M);
	for theta in [1..2^(n-3)] do;
		a[2^(n-2)+theta, 2^(n-3) + theta] := t;
	end for;
	return a;
	end function;

	alpham[1]:=function(t); return Transpose(alpha[1](t)); end function;
	
	for i in [2..n-2] do;
		a:=beta[i-1];
		alpha[i] := function(t); return M!DirectSum(a(t),(a)(t)); end function;
		alpham[i] := function(t); return Transpose(alpha[i](t)); end function;	
	end for;

	alpha[n-1] := function(t); return M!DirectSum(beta[n-2](t),beta[n-1](-t)); end function;
	alpham[n-1] := function(t); return Transpose(alpha[n-1](t)); end function;
	alpha[n] := function(t); return M!DirectSum(beta[n-1](t),beta[n-2](-t)); end function;
	alpham[n] := function(t); return Transpose(alpha[n](t)); end function;

	if func eq true then;
		return alpha,alpham;
	else;
		W:=[]; Wm:=[];
		for i in [1..#alpha] do;
			for b in B do;
				Append(~W,alpha[i](b));
				Append(~Wm,alpham[i](b));
			end for;
		end for;
		if aut eq false or IsEven(q) then;
			return W,Wm;
		else;
			nu:=PrimitiveElement(GF(q));
			d:=DiagonalMatrix(GF(q),[1,1,1,nu^-1]); 
			dg:=DiagonalMatrix(GF(q),[1,nu^-1,nu^-1,nu^-1]);
			for i in [1..n-3] do;
				dn:= DirectSum(d,dg);
				dgn:=DirectSum(dg,nu^-1*d);
				d:=dn; dg:=dgn;
			end for;
			if IsOdd(n) then;
			// Half-spin representation preserves no form
			// Rescale d to have determinant 1 or -1 if possible.
				isit,scal := IsPower(Determinant(d),2^(n-1));
				if isit then;
					d := d*scal^-1;
				else;
					isit2,scal2 := IsPower(Determinant(-d),2^(n-1));
					if isit2 then;
						d := d*scal2^-1;
					end if;
				end if;
				return W,Wm,[d];
			else;
				// We also need to construct the delta' automorphism separately here.
				dp:=DiagonalMatrix(GF(q),[1,nu,nu,1]);
				dgp:=DiagonalMatrix(GF(q),[1,nu^-1,nu^-1,1]);
				for i in [1..n-3] do;
					dpn := DirectSum(dp,nu*dgp);
					dgpn:= DirectSum(dgp,nu^-1*dp);
					dp := dpn; dgp := dgpn;
				end for;
				if  (n mod 4) eq 0 then;
					// Half-spin representation preserves an orthogonal plus type form
					// For this computation, we use dg instead of d to induce the delta automorphism
					// dg can be rescaled to preserve the form and have determinant 1
					dg := dg * nu^(n div 4);
					// dgp lies in the conformal group, so we do not rescale it.
					return W,Wm,[dg,dgp];
				else;
					// Half-spin representation preserves a symplectic form
					// d can be rescaled to preserve the form and have determinant 1;
					d := d*nu^((n-2) div 4);
					// dp lies in the conformal group, so we do not rescale it.
					return W,Wm,[d,dp];	
				end if;
			end if;
		end if;
	end if;


end function;





spininductcirc:=function(n,q :func:=false, aut:=false);
	
	if aut eq true and (q eq 0 or func eq true) then;
		error "aut=true only works for nonzero q and func := false";
	end if;

	Wb,Wbm:=spininductplus(n+1,q:func:=true);
	e:=#Basis(GF(q));

	M:=MatrixAlgebra(GF(q),2^n);
	
	W:=[];Wm:=[];

	for j in [1..n-1] do;
		Append(~W,Wb[j]);
		Append(~Wm,Wbm[j]);			
	end for;
	f := function(b); return Wb[n](b) + Wb[n+1](b) - Identity(M); end function;
	Append(~W,f);
	f := function(b); return Wbm[n](b) + Wbm[n+1](b) - Identity(M); end function;
	Append(~Wm,f);


	if func then;
		return W,Wm;
	elif func eq false then;
		out:=[]; outm:=[];
		B := Basis(GF(q));
		for i in [1..#W] do;
			for b in B do;
				Append(~out,W[i](b));
				Append(~outm,Wm[i](b));
			end for;
		end for;
		if aut eq false or IsEven(q) then;
			return out, outm;
		else;
			nu:=PrimitiveElement(GF(q));
			d:=DiagonalMatrix(GF(q),[1: i in [1..2^(n-1)]] cat [nu^-1 : i in [1..2^(n-1)]]);
			return out, outm, [d];
		end if;
	end if;

end function;










spininductminus:=function(n,q:func:=false,aut:=false);
// Input: an integer n>2 and a prime power q
// Return: sequences W and W2, generators for the half-spin representation of 2.SO^+_2n(q)
// aut:=true returns a third sequence of generators for outer automorphisms realised by matrices
// This sequence will have length either 1 or 2.
// If it has length 2, the first entry lies in the same quasisimple classical group as the spin group.
// The second, together with the first, generates the full automorphism group.
// If it has length 1, the entry generates the full automorphism group, and lies in the classical group if this is possible.

	if aut eq true and (q eq 0 or func eq true) then;
		error "aut=true only works for nonzero q and func := false";
	end if;

	X,Xm:=spininductplus(n,q^2:func:=true,largeff:=true);

	if q eq 0 then;
		FF<t,u,del,gam,delbar,gambar>:=BaseRing(X[1](1));
		bar:=hom<FF -> FF | [t,u,delbar,gambar,del,gam]>;
	end if;	

	M := Parent(X[1](1));

	Y := []; Ym:=[];
	for i in [1..n-2] do;
		Y[i] := function(t); return M!X[i](t); end function;
		Ym[i] := function(t); return M!Xm[i](t); end function;
	end for;


	if q ne 0 then;	
		Y[n-1] := function(u); return X[n-1](u) * X[n](u^q); end function;
		Ym[n-1] := function(u); return Xm[n-1](u^q) * Xm[n](u); end function;
	else;
		Y[n-1] := function(u); return M!X[n-1](u) * M!X[n](bar(u)); end function;
		Ym[n-1] := function(u); return M!Xm[n-1](bar(u)) * M!Xm[n](u); end function;
	end if;



	if func eq false then;
//		F<nu>:=GF(q^2);
		F:=GF(q^2); nu:=PrimitiveElement(F);
		Bb:=Basis(F);
		Bs:=Basis(sub<F|nu^(q+1)>);
		out:=[Y[i](b) : i in [1..n-2], b in Bs] cat [Y[n-1](b) : b in Bb];
		outm:=[Ym[i](b) : i in [1..n-2], b in Bs] cat [Ym[n-1](b) : b in Bb];
		if aut eq false or IsEven(q) then;
			return out,outm;
		else;
			d := DiagonalMatrix(GF(q^2),[1,nu^-1,nu^-1,nu^(-q-1)]);
			sigma:=function(d); return Generic(Parent(d))![e^q : e in Eltseq(d)]; end function;
			for i in [1..n-3] do;
				d := DirectSum(d,nu^-1*sigma(d));
			end for;
			if IsOdd(n) then;
				// Rescaling d to preserve the form
				d := nu^((n-1) div 2) * d;
				// Now attempting to rescale d to preserve the form and have determinant 1 or -1
				// To do this, we can only rescale d by elements whose order divides q+1
				// IsPower gives us an element that would rescale d to have determinant 1
				// Such an element, multiplied by all roots of unity in F, will give all elements that would do this
				// We then check to see if any such elements have order dividing q+1
				u:=RootOfUnity(2^(n-1),F);
				U:={u^i : i in [1..2^(n-1)] | u^i in F};
				// Start with finding elements that rescale d to have determinant 1
				isit,scal:=IsPower(Determinant(d),2^(n-1));
				if isit then;
					preserve:={ scal*u : u in U | (scal*u)^(q+1) eq 1};
					if #preserve ne 0 then;
						s:=Random(preserve);
						d:=d*s^-1;
					end if;
				else;
					// Now find elements that rescale d to have determinant -1
					isit2,scal:=IsPower(Determinant(d^2),2^(n-1));
					if isit2 then;
						preserve:={ scal*u : u in U | (scal*u)^(q+1) eq 1};
						if #preserve ne 0 then;
							s:=Random(preserve);
							ds:=d^2*s^-1;
							return out,outm,[ds,d];
						end if;
					end if;
				end if;
			// If n is even, we cannot rescale d to preserve the form
			end if;
			return out,outm,[d];
		end if;
	end if;

	return Y,Ym;

end function;







twoplus:=function(n,q);

	X,Xm:=spininductplus(n,q:func:=true);

	wa:= function(alpha,t);
		return X[alpha](t) * Xm[alpha](-t^-1) * X[alpha](t);
	end function;

	h:= function(alpha,t);
		return wa(alpha,t) * wa(alpha,-1);
	end function;

	w:= Identity(Parent(X[1](1)));
	for i in [n..1 by -1] do;
		w:=w*wa(i,1);
	end for;

	nu:= PrimitiveElement(GF(q));

	if IsEven(n) then;
		if q ne 2 then;
			return [h(n-1,nu), Xm[n](1)*X[n-2](1)*w];			
		else;
			return [X[n](1)*X[n-2](1), w];
		end if;
	else;
		if q notin {2,3} then;
			return [h(n,nu),X[n](1)*w];
		else;
			return [X[n](1),w];
		end if;
	end if;


end function;









twocirc:=function(n,q:early:=false);
// Input n and q
// Return two generators for the half spin representation of Omega(2n+1,q);

	// Generators from spininductcirc
	X,Xm:=spininductcirc(n,q:func:=true);

	// The function w_alpha(t) (or n_alpha(t) from the literature)
	// Only for positive fundamental roots, so alpha is a positive integer
	wa:= function(alpha,t);
		return X[alpha](t) * Xm[alpha](-t^-1) * X[alpha](t);
	end function;

	// The function h_alpha(t) from the literature.
	h:= function(alpha,t);
		return wa(alpha,t) * wa(alpha,-1);
	end function;

	// Commutator function
	CC:=function(a,b); return a^-1*b^-1*a*b; end function;

	// The element n as given in the literature
	w:= Identity(Parent(X[1](1)));
	for i in [n..1 by -1] do;
		w:=w*wa(i,1);
	end for;

	// The element corresponding to the root element epsilon_1 - epsilon_n
	// This is given by alpha_1 + alpha_2 + ... + alpha_{n-1} if end =0, and the same + 2 alpha_n if end=1
	// All related structure constants are 1, so we can build this from iterated commutators.
	x:=function(t : tail := 0);
		if n lt 3 then error "n too small"; end if;
		out:=CC(X[1](t),X[2](1));
		if n eq 3 then return out; end if;
		for i in [3..n-2] do;
			out := CC(out,X[i](1));
		end for;
		if tail eq 0 then;
			out:= CC(out,X[n-1](1));
		elif tail eq 1 then;
			z:=Xm[n-1](1) * X[n-1](-1) * X[n](-1) * X[n-1](1) * Xm[n-1](-1);
			out := CC(out,z);
		else;
			error "tail must be 0 or 1";
		end if;
		return out;
	end function;

	if early then return x; end if;

	nu:= PrimitiveElement(GF(q));

	if IsOdd(q) then;
		if q ne 3 then;
//			hh := x(nu:tail:=1) * Transpose(x(-nu^-1:tail:=1)) * x(nu:tail:=1) * x(-1:tail:=1) 
//				* Transpose(x(1:tail:=1)) * x(-1:tail:=1);
//			hh := x(nu:tail:=0) * Transpose(x(-nu^-1:tail:=0)) * x(nu:tail:=0) * x(-1:tail:=0) 
//				* Transpose(x(1:tail:=0)) * x(-1:tail:=0);
			hh := h(1,nu);
			for i in [2..n] do;
				hh := hh*h(i,nu);
			end for;
			return [hh, X[n](1)*w];
		else;
			return [X[n](1),w];
		end if;
	else;
		// The element corresponding to the root element epsilon_1 + epsilon_n
		if q ne 2 then;
//			hh := x(nu:tail:=1) * Transpose(x(-nu^-1:tail:=1)) * x(nu:tail:=1) * x(-1:tail:=1) 
//				* Transpose(x(1:tail:=1)) * x(-1:tail:=1);
//			hh := x(nu:tail:=0) * Transpose(x(-nu^-1:tail:=0)) * x(nu:tail:=0) * x(-1:tail:=0) 
//				* Transpose(x(1:tail:=0)) * x(-1:tail:=0);
			hh := h(1,nu);
			for i in [2..n] do;
				hh := hh*h(i,nu);
			end for;
			return [hh, x(1:tail:=0)*Xm[n](1)*w];
		else;
			return [x(1:tail:=0) * Xm[n](1),w];
		end if;
	end if;



end function;






twominus:=function(n,q);

	X,Xm:=spininductplus(n,q^2:func:=true); //Obtaining the generators from their embedding inside OmegaPlus(2*n,q)
	y:=function(t); return X[n-1](t) * X[n](t^q); end function;

	nu:=PrimitiveElement(GF(q^2));

	wa:= function(alpha,t);
		return X[alpha](t) * Xm[alpha](-t^-1) * X[alpha](t);
	end function;

	h:= function(alpha,t);
		return wa(alpha,t) * wa(alpha,-1);
	end function;

	w:= y(1) * Transpose(y(-1)) * y(1);
	for i in [n-2..1 by -1] do;
		w:=w*wa(i,1);
	end for;

	hh:= h(n,nu)*h(n-1,nu^q);

	x:= X[n-1](1)*X[n](1);

	return [x*w,hh];

end function;


// Extracted from AutDn.tex by MagmaCode 2.1 on Wed Jan 27 10:03:57 2016

//
// Automorphisms of groups of Lie type D_n

// Author: Don Taylor

// Created: 19 January 2016
// Adapted for groups of Lie type B_n by Daniel Rogers

DEBUG := false;



partialCST := function(tp, n,X,Xm: GS := false, Signs := false, Orders:=false, largeff:=false)
  
	// Elements of X and Xm should be matrices over the polynomial ring in two variables.

	F := Rationals();
	if largeff then;
		
	else;
		FF<t,u>:=PolynomialRing(F,2);
	end if;


	M:=MatrixAlgebra(F,Degree(Parent(X[1](t)))); I:=Identity(M);


	error if n lt 2, "Rank must be at least 2";
  
	tprk := tp cat IntegerToString(n);

  
	if Type(Signs) eq SeqEnum then
    
		RD := RootDatum(tprk : Isogeny := "SC", Signs := Signs);
  
	elif GS then
    
		if tp eq "F" then
      
			ss := [1,1,1,1,-1,1,1,1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1];
    
		elif tp eq "G" then
      
			ss := [-1,1,1,1];
    
		else error "The Gilkey-Seitz option (GS) requires type F or G";
    
		end if;
    
		RD := RootDatum(tprk : Isogeny := "SC", Signs := ss);
  
	else
    
		RD := RootDatum(tprk : Isogeny := "SC");
  
	end if;
  
	
	Phi := Roots(RD : Basis := "Root");
  
	PhiPlus := PositiveRoots(RD : Basis := "Root");
  
	N := #PhiPlus;
  
	F := Rationals();
  
	B := Basis(F);
  
	p := Characteristic(F);
  
	e := Degree(F);
  
	Psi := {@ alpha : alpha in PhiPlus | #Support(alpha) le 2 @};
  
	ndx := [ Index(PhiPlus,alpha) : alpha in Psi ];
  
	xdn := []; // inverted index
  
	for i := 1 to #ndx do 
		xdn[ndx[i]] := i; 
	end for;
  
	npos := #Psi * e;
  
	rels := [ ];

  // Omit the p-power relations unless requested
	if Orders then
		for y in (X cat Xm) do;
			Append(~rels,y(t)*y(u) eq y(t+u));
			// This confirms that y(t)^p = y(p*t), so y(t) has order p in characteristic p
			// provided y(t) is upper/lower triangular with all eigenvalues 1
		end for;
	end if;

	flag:=true;
	
	
	case tp:
    
		when "A","D","E":
      
			pairs := [<1,1>];
    
		when "B","C","F":
      
			pairs := [<1,1>,<1,2>,<2,1>];
    
		when "G":
      
			pairs := [<1,1>,<1,2>,<2,1>,<1,3>,<3,1>,<2,3>,<3,2>];
  
		else:
    
			error "Unknown type",tp;
  
	end case;

  

	for a := 1 to n-1 do
    
		if DEBUG then print "a =",a; end if;
    
		for b := a+1 to n do
      
			if DEBUG then 
				print "b =",b; 
			end if;

			_, Q := sub< RD | [a,b] >;
      
			m := #Q;
      
			for r_ := 1 to m-1 do
        
				r := Q[r_];
        
				alpha := Phi[r];
        
				Y := (r le N) select X[xdn[r]] else Xm[xdn[r-N]];
        
				for s_ := r_+1 to m do
          
					s := Q[s_];
          
					if s-r eq N then continue; end if;
          
					if DEBUG then print "r =",r,"s =",s; end if;
          
					beta := Phi[s];
          
					Z := (s le N) select X[xdn[s]] else Xm[xdn[s-N]];
          
					if alpha+beta notin Phi then
            
						rels cat:= [ Y(t)^-1*Z(u)^-1*Y(t)*Z(u) eq I];
          
					else
            
						b_nu:=t; b_mu:=u;
								lhs := Y(b_nu)^-1*Z(b_mu)^-1*Y(b_nu)*Z(b_mu);
                
								rhs := [];
                
								for pair in [w : w in pairs | w[1]*alpha+w[2]*beta in Phi] do
                  
									i, j := Explode(pair);

									c := LieConstant_C(RD,i,j,r,s);
 //print <i,j,alpha,beta,c>;                  
									if DEBUG then print "  ",i,j,c; end if;
                  
									if F!c ne 0 then
                    
										gamma := i*alpha+j*beta;
                    
										ii := Index(Phi,gamma);
                    
										W := (ii le N) select X[xdn[ii]] else Xm[xdn[ii-N]];
                    
										if DEBUG then print "   t =",ii; end if;
                    
											Append(~rhs, W(c*b_nu^i*b_mu^j));
                  
									end if;
                
								end for;
                
								rhsval := IsEmpty(rhs) select I else &*rhs;
                
								Append(~rels, lhs eq rhsval);
              
								if lhs ne rhsval then; if flag then print alpha,beta,Index(Phi,alpha),Index(Phi,beta),lhs,rhsval; flag:=false; end if; end if;              
					end if;
        
				end for;
      
			end for;
    
		end for;
  
	end for;
	if #{r : r in rels | r eq false} ne 0 then;
		return false,rels,#{i : i in [1..#rels] | rels[i] eq false};
	else;
		return true;
	end if;	
  
end function;





twistCST := function(tp, n,X,Xm: GS := false, Signs := false, Orders:=false)
  
	// Elements of X and Xm should be matrices over the polynomial ring in two variables.
	error if n lt 2, "Rank must be at least 2";
  

	FF<t,u,del,gam,delbar,gambar>:=BaseRing(X[1](1));
	bar:=hom<FF -> FF | [t,u,delbar,gambar,del,gam]>;

	M:=MatrixAlgebra(FF,Rank(X[1](1)));
	I:=Identity(M);



	tprk := tp cat IntegerToString(n);

  
	if Type(Signs) eq SeqEnum then
    
		RD := RootDatum(tprk : Isogeny := "SC", Signs := Signs);
  
	elif GS then
    
		if tp eq "F" then
      
			ss := [1,1,1,1,-1,1,1,1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1];
    
		elif tp eq "G" then
      
			ss := [-1,1,1,1];
    
		else error "The Gilkey-Seitz option (GS) requires type F or G";
    
		end if;
    
		RD := RootDatum(tprk : Isogeny := "SC", Signs := ss);
  
	else
    
		RD := RootDatum(tprk : Isogeny := "SC");
  
	end if;
  
	
	Phi := Roots(RD : Basis := "Root");
  
	PhiPlus := PositiveRoots(RD : Basis := "Root");
 
	Long := {Phi[i] : i in [1..#Phi] | IsLongRoot(RD,i)}; 
	Short := {Phi[i] : i in [1..#Phi] | IsShortRoot(RD,i)}; 
	N := #PhiPlus;
  
	F := Rationals();
  
	B := Basis(F);
  
	p := Characteristic(F);
  
	e := Degree(F);
  
	Psi := {@ alpha : alpha in PhiPlus | #Support(alpha) le 2 @};
  
	ndx := [ Index(PhiPlus,alpha) : alpha in Psi ];
  
	xdn := []; // inverted index
  
	for i := 1 to #ndx do 
		xdn[ndx[i]] := i; 
	end for;
  
	npos := #Psi * e;
  
	rels := [ ];

  // Omit the p-power relations unless requested
	if Orders then
		for y in (X cat Xm) do;
			Append(~rels,y(t)*y(u) eq y(t+u));
			// This confirms that y(t)^p = y(p*t), so y(t) has order p in characteristic p
			// provided y(t) is upper/lower triangular with all eigenvalues 1
		end for;
	end if;

	flag:=true;
	
	eps:=function(alpha,beta); // Uses same constants as Bn
		return (LieConstant_C(RD,1,1,Index(Phi,alpha),Index(Phi,beta)));
	end function;

	eta:=function(alpha,beta);

		if alpha+2*beta in Phi then;
			return LieConstant_C(RD,1,2,Index(Phi,alpha),Index(Phi,beta));		
		elif alpha+2*beta notin Phi and 2*alpha+beta in Phi then;
			return LieConstant_C(RD,2,1,Index(Phi,alpha),Index(Phi,beta));
		else;
			error "Erroneous call to eta";
		end if;

	end function;
	
	
	case tp:
    
		when "A","D","E":
      
			pairs := [<1,1>];
    
		when "B","C","F":
      
			pairs := [<1,1>,<1,2>,<2,1>];
    
		when "G":
      
			pairs := [<1,1>,<1,2>,<2,1>,<1,3>,<3,1>,<2,3>,<3,2>];
  
		else:
    
			error "Unknown type",tp;
  
	end case;

  

	for a := 1 to n-1 do
    
		if DEBUG then print "a =",a; end if;
    
		for b := a+1 to n do
      
			if DEBUG then 
				print "b =",b; 
			end if;

			_, Q := sub< RD | [a,b] >;
      
			m := #Q;
      
			for r_ := 1 to m-1 do
        
				r := Q[r_];
        
				alpha := Phi[r];
        
				Y := (r le N) select X[xdn[r]] else Xm[xdn[r-N]];
        
				for s_ := r_+1 to m do
          
					s := Q[s_];
          
					if s-r eq N then continue; end if;
          
					if DEBUG then print "r =",r,"s =",s; end if;
          
					beta := Phi[s];
          
					Z := (s le N) select X[xdn[s]] else Xm[xdn[s-N]];
          
					if alpha+beta notin Phi then
            
						rels cat:= [ Y(t)^-1*Z(u)^-1*Y(t)*Z(u) eq I];
          
					else
    
						if alpha in Long then;
							b_nu:=t;
						else;
							b_nu:=del;
						end if;
						if beta in Long then;
							b_mu:= u;
						else;
							b_mu :=gam;
 						end if;        
						lhs := Y(b_nu)^-1*Z(b_mu)^-1*Y(b_nu)*Z(b_mu);
                
						rhs := [];
                
						if #{alpha in Long, beta in Long, alpha+beta in Long} eq 1 then; //all long or short roots
							kk:=Index(Phi,alpha+beta);
							W := (kk le N) select X[xdn[kk]] else Xm[xdn[kk-N]];
							rhs:=[W(eps(alpha,beta) * b_nu * b_mu)];
          
						elif alpha in Short and beta in Short and alpha+beta in Long then;
							kk:=Index(Phi,alpha+beta);
							W := (kk le N) select X[xdn[kk]] else Xm[xdn[kk-N]];
							// Formulation is different in twisted CST presentation to untwisted in this case.
							// Thus we need to halve the structure constant.
							rhs:=[W((eps(alpha,beta)/2)*(b_nu * bar(b_mu) + bar(b_nu) * b_mu))];							
						elif alpha in Long and alpha+2*beta in Long and beta in Short and alpha+beta in Short then;
							kk:=Index(Phi,alpha+beta);
							W := (kk le N) select X[xdn[kk]] else Xm[xdn[kk-N]];
							kk2:=Index(Phi,alpha+2*beta);
							W2 := (kk2 le N) select X[xdn[kk2]] else Xm[xdn[kk2-N]];
							rhs[1]:=W(eps(alpha,beta) * b_nu * b_mu);
							rhs[2]:=W2(eta(alpha,beta) * b_nu * b_mu * bar(b_mu));
						elif beta in Long and beta+2*alpha in Long and alpha in Short and alpha+beta in Short then;
							kk:=Index(Phi,alpha+beta);
							W := (kk le N) select X[xdn[kk]] else Xm[xdn[kk-N]];
							kk2:=Index(Phi,beta+2*alpha);
							W2 := (kk2 le N) select X[xdn[kk2]] else Xm[xdn[kk2-N]];
							rhs[1]:=W(eps(alpha,beta) * b_nu * b_mu);
							rhs[2]:=W2(eta(alpha,beta) * b_mu * b_nu * bar(b_nu));
						end if;

					rhsval := IsEmpty(rhs) select I else &*rhs;
                
						Append(~rels, lhs eq rhsval);

						if lhs ne rhsval then; if flag then print alpha,beta,Index(Phi,alpha),Index(Phi,beta),lhs,rhsval; flag:=false; end if; end if;              
					end if;
        
				end for;
      
			end for;
    
		end for;
  
	end for;
	if #{r : r in rels | r eq false} ne 0 then;
		return false,rels,#{i : i in [1..#rels] | rels[i] eq false};
	else;
		return true;
	end if;	
  
end function;










testplus:=function(n: early := false);

	X,X2:=spininductplus(n,0:func:=true);

	F:=Rationals();
	FF<t,u>:=PolynomialRing(F,2);

	M:=MatrixAlgebra(FF,2^(n-1));

	for i in [1..n] do;
		x:=function(t); return M!X[i](t); end function;
		X[i]:=x;
	end for;

	for j in [1..n-2] do;
		x:=function(t);
			out:= X[j](t)*X[j+1](1)*X[j](t)^-1*X[j+1](1)^-1;
			return out;
		end function;
		X[n+j]:=x;
	end for;

	x:=function(t);
		out:= X[n-2](t)*X[n](1)*X[n-2](t)^-1*X[n](1)^-1;
		return out;
	end function;
	X[2*n - 1] := x;

	Xm:=[];
	for i in [1..2*n-1] do;
		Xm[i] := function(t); return Transpose(X[i](t)); end function;
	end for;

	if early then;
		return X,Xm;
	end if;


	return partialCST("D",n,X,Xm:Orders:=true);


end function;













testcirc:=function(n:early:=false);

	X,X2:=spininductplus(n+1,0:func:=true);


	F:=Rationals();
	FF<t,u>:=PolynomialRing(F,2);

	M:=MatrixAlgebra(FF,2^n);

	for i in [1..n-1] do;
		x:=function(t); return M!X[i](t); end function;
		X[i]:=x;
	end for;

	X[n] := function(t); return M!X[n](t) + M!X[n+1](t) - Identity(Parent(M!X[n](t))); end function;

	for j in [1..n-2] do;
		x:=function(t);
			out:= X[j](t)*X[j+1](1)*X[j](t)^-1*X[j+1](1)^-1;
			return out;
		end function;
		X[n+j]:=x;
	end for;


	X[2*n - 1]:=function(t);
		twist:=function(f);
			out:=function(t);
				return DirectSum(f(t),f(-t));
			end function;
			return out;
		end function;

		R:=MatrixAlgebra(FF,4);
		x:=function(t);
			out:=Identity(R);
			out[3][1]:=-t;
			out[4][2]:=-t;
			return out;
		end function;
		
		for i in [1..n-2] do;
			x:=twist(x);
		end for;
		
		return x(t);
		
	end function;

	X[2*n]:=function(t);
		twist:=function(f);
			out:=function(t);
				return DirectSum(f(t),f(t));
			end function;
			return out;
		end function;

		R:=MatrixAlgebra(FF,4);
		x:=function(t);
			out:=Identity(R);
			out[4][1]:=-t;
			return out;
		end function;
		
		for i in [1..n-2] do;
			x:=twist(x);
		end for;
		
		return x(t);
		
	end function;


	Xm:=[];
	for i in [1..2*n] do;
		Xm[i] := function(t); return Transpose(X[i](t)); end function;
	end for;

	if early then;
		return X,Xm;
	end if;


	return partialCST("B",n,X,Xm:Orders:=true);


end function;














testminus:=function(n: early := false);

	Y,Ym:=spininductminus(n,0:func:=true);

	FF<t,u,del,gam,delbar,gambar>:=BaseRing(Y[1](1));
	bar:=hom<FF -> FF | [t,u,delbar,gambar,del,gam]>;

	M:=MatrixAlgebra(FF,2^(n-1));

	for i in [1..n-1] do;
		x:=function(t); return M!Y[i](t); end function;
		Y[i]:=x;
	end for;

	for i in [1..n-3] do;
		Y[n-1+i] := function(t); return Y[i](t)^-1*Y[i+1](1)^-1 * Y[i](t) * Y[i+1](1); end function;
		Ym[n-1+i] := function(t); return Transpose(Y[n-1+i](bar(t))); end function;
	end for;
	Y[2*n-2] := function(t); return Ym[n-1](1) * Y[n-1](-1) * Y[n-2] (-t) * Y[n-1](1) * Ym[n-1](-1); end function;
	Ym[2*n-2] := function(t); return Transpose(Y[2*n-2](bar(t))); end function;
	Y[2*n-3] := function(t); return Y[2*n-2](t * bar(t)) * Y[n-2](1)^-1 * Y[n-1](t)^-1 * Y[n-2](1) * Y[n-1](t); end function;
	Ym[2*n-3] := function(t); return Transpose(Y[2*n-3](bar(t))); end function;

	if early then;
		return Y,Ym;
	end if;


	return twistCST("B",n-1,Y,Ym:Orders:=true);
//	return partialCST("B",n-1,Y,Ym:Orders:=true);


end function;





